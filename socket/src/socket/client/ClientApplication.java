package socket.client;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.Socket;
import java.util.Scanner;

public class ClientApplication {
	Socket mySocket = null;
	MessageListener ml = null; // ????? ?????? ???
	static ClientSimulator sm; // ????????? ?????? ??? ????????? ???
	static int num_req = 1; // Request message ?? Num_Req?? value
	static String cid = null; // ????????? ????? CID
	String client_req = null; // ??????? ??? ????

	public static void main(String[] args) {
		ClientApplication client = new ClientApplication();
		Scanner sc = new Scanner(System.in);

		OutputStream out = null;
		DataOutputStream dout = null;
		InputStream in = null;
		DataInputStream din = null;
		MessageListener listener = null;

		int send = 0;

		/* TCP ???? ??, ???????? CID?? ??©ö??? */
		System.out.print("CID(NickName) ???: ");
		cid = sc.nextLine();

		try {
			client.mySocket = new Socket("localhost", 55555);
			System.out.println("?????? ???????????.");

			listener = new MessageListener(client.mySocket, client);
			sm = new ClientSimulator(client.mySocket);
			listener.start();

			out = client.mySocket.getOutputStream();
			dout = new DataOutputStream(out);
			in = client.mySocket.getInputStream();
			din = new DataInputStream(in);

			while (true) {
				System.out.println("\n?????? ???? ????? ?????? ??????? ????????.\n" + " a) CID ????\n"
						+ " b) ???? ?©£?\n" + " c) TCP ???? ???? ?©£?\n" + " d) ????? ??? ????????? IP???? CID\n"
						+ " q) ?????? ???? ????");
				System.out.print(">> ");
				String client_req = sc.nextLine();

				boolean check_null = (client_req).equals("");
				if (check_null == true) {
					System.out.println("???? ??????? ???????.");
					continue;
				}

				reqMessage(client_req, cid, dout);
				send++;
				Thread.sleep(100);

				/* ?????? ????????? ?????? ??????? ?¥ê? */
				if (listener.quit == true) {
					try {
						if (din != null)
							din.close();
						if (in != null)
							in.close();
						if (dout != null)
							dout.close();
						if (out != null)
							out.close();
						if (client.mySocket != null) {
							client.mySocket.close();
							break;
						}
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			}
		} catch (Exception e) {
			System.out.println("Connection Fail.");
			e.printStackTrace();
		}
		System.out.println("======================================================");
		System.out.println("Request ????? ???? ???: " + send);
		System.out.println("Request ????? ???? ???? ???: " + num_req);
		System.out.println("Request ????? ?????? ???: " + (send - num_req));
		System.out.println("Time out?? ???? ACK ????? ?????? ???: " + listener.ack_resend);
		System.out.println("Time out?? ???? Request ????? ?????? ???: " + listener.res_resend);
		System.out.println(
				"???????: " + ((double) (send - num_req) / (double) (listener.ack_resend + listener.res_resend)));
		System.out.println("======================================================");
	}

	/* ?????? Request message?? ??????? ???? */
	public static void reqMessage(String client_req, String cid, DataOutputStream dout) {
		// msg = Request message
		String msg = "Req///" + client_req + "///CID:" + cid + "///Num_Req:" + num_req + "///END_MSG";
		sm.sendMessage(msg);
		System.out.println("[Request] : " + msg);
	}
}