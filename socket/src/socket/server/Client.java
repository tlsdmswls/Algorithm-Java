package socket.server;

import java.io.*;
import java.net.*;
import java.time.*;
import java.time.format.DateTimeFormatter;
import java.util.*;

public class Client extends Thread {
	Client c;
	Socket socket;
	ServerApplication server;
	ArrayList<String> clientList = new ArrayList<String>();	// ????? ??????? CID, IP???
	ArrayList<String> cidList = new ArrayList<String>();	// ?????? ????? ??????? CID
	ServerSimulator sm;			// ?????? ??? ???????? ???
	
	int currentTime = 1;		// ???? ???? ?©£?
	int scode;					// ???? ???
	String msg;					// ????????¥ê??? ?¬à???? ?????
	String cid;					// ?????? ????? CID
	String num_req;				// Response message ?? Num_Req?? value
	int num_ack = 0;			// ACK message ?? Num_ACK?? value (???: 0)
	boolean check_send = false; // req_num?? ack_num?? ?????? true
	boolean close = false;		// ????????? ???? ???? ?????? true
	
	OutputStream out = null;
	DataOutputStream dout = null;
	InputStream in = null;
	DataInputStream din = null;
	
	/* ?????? */
	Client(Socket _s, ServerApplication _ss) {
		this.socket = _s;
		this.server = _ss;
	}
	
	Client(int currentTime) {
		this.currentTime = currentTime;
	}
	
	public Client(Socket _s, ServerSimulator _sm) {
		this.socket = _s;
		this.sm = _sm;
	}

	public void run() {
		try {
			startTimer();
			
			out = socket.getOutputStream();
			dout = new DataOutputStream(out);
			in = socket.getInputStream();
			din = new DataInputStream(in);
			
			sm = new ServerSimulator(server.c);
			
			/* ????????¥ê??? Request message?? ?¬à????? Response message?? ???? */
			while(true) {
				msg = din.readUTF();
				num_req = msg;
				StringTokenizer st_msg = new StringTokenizer(msg, "///");
				StringTokenizer st_num = new StringTokenizer(num_req, "///");
				
				msg = st_msg.nextToken();
				
				/* ??????????? Request message?? ???? ??? */
				if(msg.equals("Req")) {
					msg = st_msg.nextToken();
					
					for (int i = 0; i < 4; i++) {
						num_req = st_num.nextToken();
					}
					num_req = num_req.substring(8);
					
					/* num_req?? num_ack?? ?????.*/
					// ?? num?? ??? ???: ???? -> num_ack + 1
					check_send = (Integer.parseInt(num_req) == num_ack);
					
					if(check_send == false) {
						num_ack++;	// ????? ?????????? ???????? ?????? +1
					}
					
					// ACK message ????
					ackMessage();
					
					// Response message ????
					// ?? num?? ???? ???: ???? -> ????? ????
					if(check_send == true) {
						sendResMessage(msg, st_msg);
					}
					
					if(close == true) {
						break;
					}
				}
				
			}
		} catch (Exception e){
			e.printStackTrace();
		}				
	}
	
	/* Response message?? ??????? ???? */
	public void sendResMessage(String msg, StringTokenizer st_msg) {
		/* ?????:	??????? ???????
		 * ???? ????:	Response message ?????? ???? ???? */				
		if(msg.equals("a")) {
			// CID ????
			cid = st_msg.nextToken();
			cid = cid.substring(cid.lastIndexOf("CID:") + 4);
			cidList.add(cid);
			
			// ???? ??? ?¢¥? value ??? ??, ?????? ??? ????????? ??????? write ????
			String valueA = resValue(100, cid);
			resMessage(100, valueA);
		}
		else if(msg.equals("b")) {
			// ???? ?©£?
			String valueB = resValue(130, null);
			resMessage(130, valueB);
		}
		else if(msg.equals("c")) {
			// ??????????? ???? ?©£?
			String valueC = resValue(150, null);
			resMessage(150, valueC);
		}
		else if(msg.equals("d")) {
			// ??????? CID, IP??? ?????
			cid = st_msg.nextToken();
			cid = cid.substring(cid.lastIndexOf("CID:") + 4);
			String valueD = resValue(200, null);
			resMessage(200, valueD);
		}
		else if(msg.equals("q")){
			// ???? ???? ????
			String valueQ = resValue(250, null);
			resMessage(250, valueQ);
			try {
				if(din != null)
					din.close();
				if(in != null)
					in.close();
				if(dout != null)
					dout.close();
				if(out != null)
					out.close();
				if(socket != null) {
					server.clients.remove(this);
					socket.close();
					close = true;
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		else {	// ??? ????? ?¥í? ????
			String valueF = resValue(300, null);
			resMessage(300, valueF);
		}
	}
	

	/* Response Message?? ??????? ?¢¥? value ???? ????? ???? */
	public String resValue(int scode, String cid) {
		String value = "CID: IP address";
		if (scode == 100) {
			value = "?????? ????? ?????????? ??????????. (" + cid + ")";
		}
		else if (scode == 130) {
			LocalDateTime time = LocalDateTime.now();
			value = time.format(DateTimeFormatter.ofPattern("???? ?©£?: a hh?? mm??"));
		}
		else if (scode == 150) {
			value = "???????? ???? ?©£?: " + currentTime + "??";
		}
		else if (scode == 200) {
			getClientList();
			// value = CID: IP *** CID: ... *** END_ClientList
			StringBuffer sb = new StringBuffer();
			for(String s : clientList) {
				sb.append(s + "***");
			}
			sb.append("END_ClientList");
			value = sb.toString();
		} else if (scode == 250) {
			value = "???????? ?????? ?????????? ???????????.";
		} else if (scode == 300) {
			value = "??? ????? ?¥í¨¨? ??????????.";
		}
		return value;
	}

	/* ?????? ??? ????????? ??????? ACK message?? ??????? ???? */
	public void ackMessage() {
		// msg = ACK message
		String msg = "ACK///Num_ACK:"+ num_ack + "///END_MSG";
		sm.sendMessage(msg);
	}
	
	/* ?????? ??? ????????? ??????? Response message?? ??????? ???? */
	public void resMessage(int scode, String value) {
		// msg = Response message
		String msg = "Res///" + scode + "///" + value + "///END_MSG";
		sm.sendMessage(msg);
	}

	/* CurrentTime?? ??? ???? ???? */
	public void startTimer() {
		Timer timer = new Timer();
		TimerTask task = new TimerTask(){
		    @Override
		    public void run() {
		    	while(true) {
		    		try {
		    			currentTime++;		// ???? ??? ????
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
		    	}
		    }	
		};
		timer.schedule(task, 1000, 1000);	// 1?? ?? ????, 1????? ???
	}
	
	/* ????? ????????? CID?? IP???? ????? ???? */
	public void getClientList() {
		String clientIp = null;
		String clientId = null;
		
		clientList.clear();
		for(int i = 0; i < server.clients.size(); i++) {
			clientId = server.clients.get(i).cid;
			clientIp = server.clients.get(i).socket.getInetAddress().toString();
			clientIp = clientIp.substring(clientIp.lastIndexOf("/") + 1);
			clientList.add(clientId + " " + clientIp);
		}
	}
}